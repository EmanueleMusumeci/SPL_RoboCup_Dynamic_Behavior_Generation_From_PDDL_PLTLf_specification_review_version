import os
from pathlib import Path

from lib.dfa.dfa import DFA
from lib.dfa.dfa_handler import DFAHandler, remove_initial_dummy_state
from lib.registries.action import ActionRegistry
from lib.registries.literals import LiteralRegistry
from lib.registries.values import ValueRegistry
from lib.utils import distance

def setup_experiment():
    ''' 
     __________________
    |                  |
    |  DFA Experiment  |
    |__________________|

    '''

    ValueRegistry()["waypoint"] = (2000, 2000)

    ActionRegistry(robot_idle_skill="Idle")
    ActionRegistry()["action_kick_to_goal"] = ("Kick", [("positionX", 4500), ("positionY", 0)])
    ActionRegistry()["action_reach_ball"] = "ReachBall"
    ActionRegistry()["action_idle"] = "Idle"

    ValueRegistry()["ball_distance_threshold"] = 500

    def striker_distance_from_ball(last_ball_position, striker_position):
        return distance(last_ball_position, striker_position)
    ValueRegistry().add_function(striker_distance_from_ball)

    def is_striker_near_ball(striker_distance_from_ball, ball_distance_threshold):
        return striker_distance_from_ball < ball_distance_threshold
    LiteralRegistry().add_function(is_striker_near_ball)


    ValueRegistry()["goal_corner_1"] = (4500, 750)
    ValueRegistry()["goal_corner_2"] = (5500, -750)
    def is_inside_bounding_box(point, bbox):
        return point[0] >= bbox[0][0] and point[0] <= bbox[1][0] and point[1] >= bbox[0][1] and point[0] <= bbox[1][1]

    def goal_scored(last_ball_position, goal_corner_1, goal_corner_2):
        return is_inside_bounding_box(last_ball_position, (goal_corner_1, goal_corner_2))
    LiteralRegistry().add_function(goal_scored)

    #Simple approacher DFA
    
    #Action existence constraint G(action_0 | ... | action_N)
    ltl_formula_str = "\
        G(\
            (action_kick_to_goal | action_reach_ball | action_idle)\
        )"
    
    #Action mutual exclusion constraint G((action_0 -> (!action_1 & ... & !action_N)) & (action_1 -> (!action_0 & !action_2 & ... & !action_N))
    ltl_formula_str +="\
        &\
        G(\
            (action_kick_to_goal -> !action_reach_ball & !action_idle) \
            &\
            (action_reach_ball -> !action_kick_to_goal& !action_idle) \
            &\
            (action_idle -> !action_reach_ball & !action_kick_to_goal) \
        )"
    
    #Action G(PRECONDITION -> X(action -> POSTCONDITION))
    ltl_formula_str +="\
        &\
        G(\
            ((!literal_goal_scored & !literal_is_striker_near_ball) -> ((action_reach_ball U literal_is_striker_near_ball) -> (literal_is_striker_near_ball & !literal_goal_scored)))\
        )\
        &\
        G(\
            ((!literal_goal_scored & literal_is_striker_near_ball) -> ((action_kick_to_goal U literal_goal_scored) -> literal_goal_scored))\
        )\
        &\
        G(\
          (literal_goal_scored -> action_idle)\
        )"
    
    #Goal specification E(goal_condition)
    ltl_formula_str +="\
        &\
        F(literal_goal_scored)\
        \
    "
    print("Creating DFA from formula: %s with post-processing step 'remove_initial_dummy_state'" % (ltl_formula_str))
    try:
        simple_approacher_dfa = DFA.DFA_from_LTL_formula_string(ltl_formula_str)
        simple_approacher_dfa.plot(save_to=os.path.join(os.path.dirname(os.path.abspath(__file__)), "dfa_preview", Path(os.path.abspath(__file__)).stem+".png"), show_plot = False)
        dfa_handler = DFAHandler(simple_approacher_dfa, dfa_postprocessing_functions = [remove_initial_dummy_state])
    except AssertionError as e:
        raise e
    else:
        print("OK")
    
    return {"striker" : dfa_handler}